{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01-preview/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "projectAppVmSize": {
      "type": "string",
      "defaultValue": "Standard_D1_v2",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "projectDebianOSVersion": {
      "type": "string",
      "defaultValue": "7",
      "allowedValues": [
        "7",
        "8"
      ],
      "metadata": {
        "description": "The Debian version for the VM. This will pick a fully patched image of this given Debian version. Allowed values are: 7,8."
      }
    },
    "projectName":{
      "type":"string",
      "metadata":{
        "description":"String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 61
    },
    "projectAppInstanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM instances (100 or less)."
      },
      "maxValue": 100
    },
    "projectAppAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "projectAppAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
		"loadBalancerFrontEndLBPort": {
			"type": "int",
			"metadata": {
				"description": "The front end port to load balance"
			},
			"defaultValue": 80
		},
		"loadBalancerBackEndLBPort": {
			"type": "int",
			"metadata": {
				"description": "The front end port to load balance"
			},
			"defaultValue": 80
		},
		"loadBalancerProbeIntervalInSeconds": {
			"type": "int",
			"metadata": {
				"description": "The interval between load balancer health probes"
			},
			"defaultValue": 15
		},
		"loadBalancerNumberOfProbes": {
			"type": "int",
			"metadata": {
				"description": "The number of probes that need to fail before a VM instance is deemed unhealthy"
			},
			"defaultValue": 5
		},
    "loadBalancerProbeRequestPath": {
      "type": "string",
      "metadata": {
        "description": "The path used for the load balancer health probe"
      },
      "defaultValue": "/html/index.html"
    },
    "projectAppInstallScriptUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/flecoqui/azure/master/azure-quickstart-templates/201-vmss-debian-glusterfs-mysql-redis/install-apache-server.sh"
    },
    "projectAppInstallScriptFileName": {
      "type": "string",
      "metadata": {
        "description": "sh [vmssInitScriptFileName]. Logs in this file /var/lib/waagent/Microsoft.OSTCExtensions.CustomScriptForLinux-1.5.2.0/download/0/stdout"
      },
      "defaultValue": "install-apache-server.sh"
    },
    "gfs1HostOs": {
      "type": "string",
      "defaultValue": "Centos",
      "allowedValues": [
        "Centos",
        "Ubuntu",
        "Debian"
      ],
      "metadata": {
        "description": "OS to install on the host system"
      }
    },
    "gfs1StorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Prefix of storage account name, each node lives in its own storage account"
      }
    },
    "gfs1ScaleNumber": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        2,
        4,
        6,
        8
      ],
      "metadata": {
        "description": "Number of nodes in the gluster file system"
      }
    },
    "gfs1AdminUsername": {
      "type": "string",
      "metadata": {
        "description": "ssh user name"
      }
    },
    "gfs1AdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "ssh password"
      }
    },
    "gfs1VmSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "metadata": {
        "description": "VM size for the nodes"
      }
    },
    "gfs1VmNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "VM name prefix, a number will be appended for each node"
      }
    },
    "gfs1CustomScriptFilePath": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/flecoqui/azure/master/azure-quickstart-templates/201-vmss-debian-glusterfs-mysql-redis/install-gfs-server.sh",
      "metadata": {
        "description": "GitHub location of the custom script that configures Gluster"
      }
    },
    "gfs1CustomScriptCommandToExecute": {
      "type": "string",
      "defaultValue": "bash install-gfs-server.sh",
      "metadata": {
        "description": "command to run the custom script"
      }
    },
    "gfs1VolumeName": {
      "type": "string",
      "defaultValue": "gfsvol",
      "metadata": {
        "description": "Gluster file system volume name"
      }
    },
    "mysqlName": {
      "type": "string",
      "metadata": {
        "description": "Connect to your cluster using mysqlName.local"
      }
    },
        "mysqlVmUserName": {
            "type": "string",
            "metadata": {
                "description": "user name to ssh to the VMs"
            }
        },
        "mysqlVmPassword": {
            "type": "securestring",
            "metadata": {
                "description": "password to ssh to the VMs"
            }
        },
        "mysqlRootPassword": {
            "type": "securestring",
            "metadata": {
                "description": "mysql root user password single quote not allowed"
            }
        },
        "mysqlReplicationPassword": {
            "type": "securestring",
            "metadata": {
                "description": "mysql replication user password single quote not allowed"
            }
        },
        "mysqlProbePassword": {
            "type": "securestring",
            "metadata": {
                "description": "mysql probe password single quote not allowed"
            }
        },
        "mysqlVmSize": {
            "type": "string",
            "defaultValue": "Standard_D2",
            "metadata": {
                "description": "size for the VMs"
            }
        },
        "mysqlStorageAccountType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "metadata": {
          "description": "Storage account type for the cluster"
        }
      },
    "mysqlHostOs": {
      "type": "string",
      "defaultValue": "Debian",
      "allowedValues": [
        "Centos",
        "Ubuntu",
        "Debian"
      ],
      "metadata": {
        "description": "OS to install on the host system"
      }
    },
        "mysqlFrontEndPort0": {
            "type": "int",
            "defaultValue": 3306,
            "metadata": {
                "description": "MySQL public port master"
            }
        },
        "mysqlFrontEndPort1": {
            "type": "int",
            "defaultValue": 3307,
            "metadata": {
                "description": "MySQL public port slave"
            }
        },
        "mysqlSshNatRuleFrontEndPort0": {
            "type": "int",
            "defaultValue": 64001,
            "metadata": {
                "description": "public ssh port for VM1"
            }
        },
        "mysqlSshNatRuleFrontEndPort1": {
            "type": "int",
            "defaultValue": 64002,
            "metadata": {
                "description": "public ssh port for VM2"
            }
        },
        "mysqlProbePort0": {
            "type": "int",
            "defaultValue": 9200,
            "metadata": {
                "description": "MySQL public port master"
            }
        },
        "mysqlProbePort1": {
            "type": "int",
            "defaultValue": 9201,
            "metadata": {
                "description": "MySQL public port slave"
            }
        },
        "mysqlCustomScriptFilePath": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/flecoqui/azure/master/azure-quickstart-templates/201-vmss-debian-glusterfs-mysql-redis/install-mysql-server.sh",
            "metadata": {
                "description": "template and script file location",
                "artifactsBaseUrl": "Base URL of the Publisher Template gallery package"
            }
        },
    "mysqlCustomScriptCommandToExecute": {
      "type": "string",
      "defaultValue": "bash install-mysql-server.sh",
      "metadata": {
        "description": "bash script command line"
      }
    },
    "mysqlConfigFilePath": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/flecoqui/azure/master/azure-quickstart-templates/201-vmss-debian-glusterfs-mysql-redis/my.cnf.template",
      "metadata": {
        "description": "template file location",
        "artifactsBaseUrl": "URL of the template package"
      }
    },
    "redisHostOs": {
      "type": "string",
      "defaultValue": "Debian",
      "allowedValues": [
        "Centos",
        "Ubuntu",
        "Debian"
      ],
      "metadata": {
        "description": "OS to install on the host system"
      }
    },
    "redisStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Prefix of storage account name, each node lives in its own storage account"
      }
    },
    "redisScaleNumber": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        2,
        4,
        6,
        8
      ],
      "metadata": {
        "description": "Number of nodes in the gluster file system"
      }
    },
    "redisAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "ssh user name"
      }
    },
    "redisAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "ssh password"
      }
    },
    "redisVmSize": {
      "type": "string",
      "defaultValue": "Standard_D1_v2",
      "metadata": {
        "description": "VM size for the nodes"
      }
    },
    "redisVmNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "VM name prefix, a number will be appended for each node"
      }
    },
    "redisCustomScriptFilePath": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/flecoqui/azure/master/azure-quickstart-templates/201-vmss-debian-glusterfs-mysql-redis/install-redis-server.sh",
      "metadata": {
        "description": "GitHub location of the custom script that configures Gluster"
      }
    },
    "redisCustomScriptCommandToExecute": {
      "type": "string",
      "defaultValue": "bash install-redis-server.sh",
      "metadata": {
        "description": "command to run the custom script"
      }
    }
    
  },
  "variables": {
    "storageAccountType": "Standard_LRS",
    "shortName": "[toLower(substring(concat(parameters('projectName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "longName": "[toLower(parameters('projectName'))]",
    "newStorageAccountSuffix": "[concat(variables('shortName'), 'sa')]",
    "uniqueStringArray": [
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '0')))]",
      "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '1')))]"
    ],
    "vhdContainerName": "[concat(variables('shortName'), 'vhd')]",
    "osDiskName": "[concat(variables('shortName'), 'osdisk')]",
    "saCount": "[length(variables('uniqueStringArray'))]",
    "vnetName": "[concat(variables('shortName'), 'vnet')]",
    "vnetAddressPrefix": "10.0.0.0/16",
    "vnetAppSubnetPrefix": "10.0.0.0/24",
    "vnetAppSubnetName": "[concat(variables('shortName'), 'app-subnet')]",
    "vnetAppNSGName": "[concat(variables('shortName'), 'app-nsg')]",
    "vnetGFSSubnetPrefix": "10.0.1.0/24",
    "vnetGFSIPPrefix": "10.0.1.1",
    "vnetGFSSubnetName": "[concat(variables('shortName'), 'gfs-subnet')]",
    "vnetGFSNSGName": "[concat(variables('shortName'), 'gfs-nsg')]",
    "vnetMySQLSubnetPrefix": "10.0.2.0/24",
    "vnetMySQLIPPrefix": "10.0.2.10",
    "vnetMySQLlbIpAddress": "10.0.2.100",    
    "vnetMySQLSubnetName": "[concat(variables('shortName'), 'mysql-subnet')]",
    "vnetMySQLNSGName": "[concat(variables('shortName'), 'mysql-nsg')]",
    "vnetRedisSubnetPrefix": "10.0.3.0/24",
    "vnetRedisIPPrefix": "10.0.3.1",
    "vnetRedisSubnetName": "[concat(variables('shortName'), 'redis-subnet')]",
    "vnetRedisNSGName": "[concat(variables('shortName'), 'redis-nsg')]",

    "publicIPAddressName": "[concat(variables('shortName'), 'pip')]",
    "loadBalancerName": "[concat(variables('shortName'), 'lb')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "natPoolName": "[concat(variables('shortName'), 'natpool')]",
    "bePoolName": "[concat(variables('shortName'), 'bepool')]",
    "natStartPort": 50000,
    "natEndPort": 50119,
    "natBackendPort": 22,
    "nicName": "[concat(variables('shortName'), 'nic')]",
    "ipConfigName": "[concat(variables('shortName'), 'ipconfig')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "diagnosticsStorageAccountName": "[concat(variables('uniqueStringArray')[0], variables('newStorageAccountSuffix'))]",
    "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
    "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',variables('diagnosticsStorageAccountResourceGroup'),'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
    "wadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
    "wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "wadcfgxstart": "[concat(variables('wadlogs'),variables('wadperfcounters1'),variables('wadperfcounters2'),'<Metrics resourceId=\"')]",
    "wadmetricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachineScaleSets/',variables('shortName'))]",
    "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
    "osType": {
      "publisher": "credativ",
      "offer": "Debian",
      "sku": "[parameters('projectDebianOSVersion')]",
      "version": "latest"
    },
    "imageReference": "[variables('osType')]",
		"lbFEName": "loadBalancerFrontEnd",
		"lbWebProbeName": "loadBalancerWebProbe",
		"lbBEAddressPool": "loadBalancerBEAddressPool",
		"lbFEIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/',variables('lbFEName'))]",
		"lbWebProbeID": "[concat(variables('lbID'),'/probes/',variables('lbWebProbeName'))]",
    "computeApiVersion": "2016-03-30",
    "networkApiVersion": "2016-03-30",
    "storageApiVersion": "2015-06-15",
    "insightsApiVersion": "2015-04-01",
    "gfs1AvailabilitySetName": "gfs1avset",
    "gfs1nicName": "gfs1nic",
    "gfs1OsImagePublisher": "[variables(concat('osImage', parameters('gfs1HostOs'), 'Publisher'))]",
    "gfs1OsImageOffer": "[variables(concat('osImage', parameters('gfs1HostOs'), 'Offer'))]",
    "gfs1OsImageSKU": "[variables(concat('osImage', parameters('gfs1HostOs'), 'SKU'))]",
    "gfs1OsImageVersion": "[variables(concat('osImage', parameters('gfs1HostOs'), 'version'))]",
    "osImageUbuntuPublisher": "Canonical",
    "osImageUbuntuOffer": "UbuntuServer",
    "osImageUbuntuSKU": "14.04.3-LTS",
    "osImageUbuntuVersion": "latest",
    "osImageCentosPublisher": "OpenLogic",
    "osImageCentosOffer": "CentOS",
    "osImageCentosSKU": "6.5",
    "osImageCentosVersion": "latest",
    "osImageDebianPublisher": "credativ",
    "osImageDebianOffer": "Debian",
    "osImageDebianSKU": "8",
    "osImageDebianVersion": "8.0.201609120",
    "mysqlStorageAccountName": "[concat(uniquestring(resourceGroup().id),'sa')]",
    "mysqlNodeCount": 2,
    "mysqlVMName": "[concat(parameters('mysqlName'), 'vm')]",
    "mysqlLbName": "[concat(parameters('mysqlName'), 'lb')]",
    "mysqlLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('mysqlLbName'))]",
    "mysqlIlbBackendAddressPoolName": "[concat(parameters('mysqlName'), '-ilbBackendPool')]",
    "mysqlIlbBackendAddressPoolID": "[concat(variables('mysqlLbID'),'/backendAddressPools/', variables('mysqlIlbBackendAddressPoolName'))]",
    "mysqlIlbRuleName": "[concat(parameters('mysqlName'), 'ilbRule')]",
    "mysqlIlbRuleID": "[concat(variables('mysqlLbID'),'/loadBalancingRules/',variables('mysqlIlbRuleName'))]",
    "mysqlSshIPConfigName": "[concat(parameters('mysqlName'), 'sshIPCfg')]",
    "mysqlSshIPConfig": "[concat(variables('mysqlLbID'),'/frontendIPConfigurations/',variables('mysqlSshIPConfigName'))]",
    "mysqlNicName": "[concat(parameters('mysqlName'), 'nic')]",
    "mysqlAvailabilitySetName": "[concat(parameters('mysqlName'), 'avset')]",
    "mysqlSingleQuote": "",
    "mysqlSa": "[variables('vnetMySQLIPPrefix')]",
    "mysqlIpOctet01": "[concat(split(variables('mysqlSa'), '.')[0], '.', split(variables('mysqlSa'), '.')[1], '.')]",
    "mysqlIpOctet2": "[int(split(variables('mysqlSa'), '.')[2])]",
    "mysqlIpOctet3": "[int(split(variables('mysqlSa'), '.')[3])]",
    "mysqlOsImagePublisher": "[variables(concat('osImage', parameters('mysqlHostOs'), 'Publisher'))]",
    "mysqlOsImageOffer": "[variables(concat('osImage', parameters('mysqlHostOs'), 'Offer'))]",
    "mysqlOsImageSKU": "[variables(concat('osImage', parameters('mysqlHostOs'), 'SKU'))]",
    "mysqlOsImageVersion": "[variables(concat('osImage', parameters('mysqlHostOs'), 'version'))]",

    "redisAvailabilitySetName": "redisavset",
    "redisnicName": "redisnic",
    "redisOsImagePublisher": "[variables(concat('osImage', parameters('redisHostOs'), 'Publisher'))]",
    "redisOsImageOffer": "[variables(concat('osImage', parameters('redisHostOs'), 'Offer'))]",
    "redisOsImageSKU": "[variables(concat('osImage', parameters('redisHostOs'), 'SKU'))]",
    "redisOsImageVersion": "[variables(concat('osImage', parameters('redisHostOs'), 'version'))]",
    "resourceAPIVersion": "2015-06-15",
    "templateAPIVersion": "2015-01-01"
  },
  "resources": [
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('vnetAppNSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "http_rule",
            "properties": {
              "description": "Allow HTTP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "https_rule",
            "properties": {
              "description": "Allow HTTPS",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 300,
              "direction": "Inbound"
            }
          },
          {
            "name": "ApptoMySQL",
            "properties": {
              "description": "Allow ApptoMySQL",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "[variables('vnetMySQLSubnetPrefix')]",
              "access": "Allow",
              "priority": 400,
              "direction": "Outbound"
            }
          },
          {
            "name": "ApptoGFS",
            "properties": {
              "description": "Allow ApptoGFS",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "[variables('vnetGFSSubnetPrefix')]",
              "access": "Allow",
              "priority": 500,
              "direction": "Outbound"
            }
          },
          {
            "name": "ApptoRedis",
            "properties": {
              "description": "Allow ApptoRedis",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "[variables('vnetRedisSubnetPrefix')]",
              "access": "Allow",
              "priority": 600,
              "direction": "Outbound"
            }
          }
         ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('vnetGFSNSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "ApptoGFS",
            "properties": {
              "description": "Allow ApptoGFS",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "[variables('vnetGFSSubnetPrefix')]",
              "access": "Allow",
              "priority": 400,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('vnetMySQLNSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix":  "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "mysql_rule_1",
            "properties": {
              "description": "Allow port 3306",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3306",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "mysql_rule_2",
            "properties": {
              "description": "Allow port 9200",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9200",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 300,
              "direction": "Inbound"
            }
          },
          {
            "name": "ApptoMySQL",
            "properties": {
              "description": "Allow ApptoMySQL",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "[variables('vnetMySQLSubnetPrefix')]",
              "access": "Allow",
              "priority": 400,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('vnetRedisNSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh_rule",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix":  "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "redis_rule",
            "properties": {
              "description": "Allow port 6379",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "6379",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "ApptoRedis",
            "properties": {
              "description": "Allow ApptoRedis",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[variables('vnetAppSubnetPrefix')]",
              "destinationAddressPrefix": "[variables('vnetRedisSubnetPrefix')]",
              "access": "Allow",
              "priority": 400,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
     {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
              "[concat('Microsoft.Network/networkSecurityGroups/', variables('vnetAppNSGName'))]",
              "[concat('Microsoft.Network/networkSecurityGroups/', variables('vnetMySQLNSGName'))]",
              "[concat('Microsoft.Network/networkSecurityGroups/', variables('vnetGFSNSGName'))]",
              "[concat('Microsoft.Network/networkSecurityGroups/', variables('vnetRedisNSGName'))]"
            ],
            "properties": {
              "addressSpace": {
                "addressPrefixes": [
                  "[variables('vnetAddressPrefix')]"
                ]
              },
              "subnets": [
                {
                  "name": "[variables('vnetAppSubnetName')]",
                  "properties": {
                    "addressPrefix": "[variables('vnetAppSubnetPrefix')]",
                    "networkSecurityGroup": {
                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vnetAppNSGName'))]"
                    }
                  }
                },
                {
                  "name": "[variables('vnetGFSSubnetName')]",
                  "properties": {
                    "addressPrefix": "[variables('vnetGFSSubnetPrefix')]",
                    "networkSecurityGroup": {
                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vnetGFSNSGName'))]"
                    }
                  }
                },
                {
                  "name": "[variables('vnetMySQLSubnetName')]",
                  "properties": {
                    "addressPrefix": "[variables('vnetMySQLSubnetPrefix')]",
                    "networkSecurityGroup": {
                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vnetMySQLNSGName'))]"
                    }
                  }
                },
                {
                  "name": "[variables('vnetRedisSubnetName')]",
                  "properties": {
                    "addressPrefix": "[variables('vnetRedisSubnetPrefix')]",
                    "networkSecurityGroup": {
                      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('vnetRedisNSGName'))]"
                    }
                  }
                }
              ]
            }
          },
          {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[concat(variables('uniqueStringArray')[copyIndex()], variables('newStorageAccountSuffix'))]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('storageApiVersion')]",
            "copy": {
              "name": "storageLoop",
              "count": "[variables('saCount')]"
            },
            "properties": {
              "accountType": "[variables('storageAccountType')]"
            }
          },
          {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('networkApiVersion')]",
            "properties": {
              "publicIPAllocationMethod": "Dynamic",
              "dnsSettings": {
                "domainNameLabel": "[variables('longName')]"
              }
            }
          },
          {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('loadBalancerName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('networkApiVersion')]",
            "dependsOn": [
              "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
            ],
            "properties": {
              "frontendIPConfigurations": [
                {
                  "name": "LoadBalancerFrontEnd",
                  "properties": {
                    "publicIPAddress": {
                      "id": "[variables('publicIPAddressID')]"
                    }
                  }
                }
              ],
              "backendAddressPools": [
                {
                  "name": "[variables('bePoolName')]"
                }
              ],
              "inboundNatPools": [
                {
                  "name": "[variables('natPoolName')]",
                  "properties": {
                    "frontendIPConfiguration": {
                      "id": "[variables('frontEndIPConfigID')]"
                    },
                    "protocol": "tcp",
                    "frontendPortRangeStart": "[variables('natStartPort')]",
                    "frontendPortRangeEnd": "[variables('natEndPort')]",
                    "backendPort": "[variables('natBackendPort')]"
                  }
                }
              ],
              "loadBalancingRules": [
                {
                  "name": "weblb",
                  "properties": {
                    "frontendIPConfiguration": {
                      "id": "[variables('lbFEIPConfigID')]"
                    },
                    "backendAddressPool": {
                      "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
                    },
                    "probe": {
                      "id": "[variables('lbWebProbeID')]"
                    },
                    "protocol": "tcp",
                    "frontendPort": "[parameters('loadBalancerFrontEndLBPort')]",
                    "backendPort": "[parameters('loadBalancerBackEndLBPort')]",
                    "enableFloatingIP": false
                  }
                }
              ],
              "probes": [
                {
                  "name": "[variables('lbWebProbeName')]",
                  "properties": {
                    "protocol": "http",
                    "port": "[parameters('loadBalancerBackEndLBPort')]",
                    "intervalInSeconds": "[parameters('loadBalancerProbeIntervalInSeconds')]",
                    "numberOfProbes": "[parameters('loadBalancerNumberOfProbes')]",
                    "requestPath": "[parameters('loadBalancerProbeRequestPath')]"
                  }
                }
              ]
            }
          },
          {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[variables('shortName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "[variables('computeApiVersion')]",
            "dependsOn": [
              "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
              "storageLoop",
              "gfs1extensionloop",
              "mysqlextensionloop",
              "redisextensionloop"
            ],
            "sku": {
              "name": "[parameters('projectAppVmSize')]",
              "tier": "Standard",
              "capacity": "[parameters('projectAppInstanceCount')]"
            },
            "properties": {
              "overprovision": "true",
              "upgradePolicy": {
                "mode": "Manual"
              },
              "virtualMachineProfile": {
                "storageProfile": {
                  "osDisk": {
                    "vhdContainers": [
                      "[concat('https://', variables('uniqueStringArray')[0], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]",
                      "[concat('https://', variables('uniqueStringArray')[1], variables('newStorageAccountSuffix'), '.blob.core.windows.net/', variables('vhdContainerName'))]"
                    ],
                    "name": "[variables('osDiskName')]",
                    "caching": "ReadOnly",
                    "createOption": "FromImage"
                  },
                  "imageReference": "[variables('imageReference')]"
                },
                "osProfile": {
                  "computerNamePrefix": "[variables('shortName')]",
                  "adminUsername": "[parameters('projectAppAdminUsername')]",
                  "adminPassword": "[parameters('projectAppAdminPassword')]"
                },
                "networkProfile": {
                  "networkInterfaceConfigurations": [
                    {
                      "name": "[variables('nicName')]",
                      "properties": {
                        "primary": "true",
                        "ipConfigurations": [
                          {
                            "name": "[variables('ipConfigName')]",
                            "properties": {
                              "subnet": {
                                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('vnetName'), '/subnets/', variables('vnetAppSubnetName'))]"
                              },
                              "loadBalancerBackendAddressPools": [
                                {
                                  "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
                                }
                              ],
                              "loadBalancerInboundNatPools": [
                                {
                                  "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('natPoolName'))]"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "extensionProfile": {
                  "extensions": [
                    {
                      "name": "init",
                      "properties": {
                        "publisher": "Microsoft.Azure.Extensions",
                        "type": "CustomScript",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": false,
                        "settings": {
                          "fileUris": [
                            "[parameters('projectAppInstallScriptUrl')]"
                          ]
                        },
                        "protectedSettings": {
                          "commandToExecute": "[concat('sh ', parameters('projectAppInstallScriptFileName'),' \"',  variables('longName'), '.', resourceGroup().location, '.cloudapp.azure.com','\" ',parameters('gfs1VmNamePrefix') ,'0', ' ', parameters('gfs1VolumeName'),' ',variables('mysqlVMName'),'0',' ',parameters('redisVmNamePrefix'),'0')]"
                        }
                      }
                    },
                    {
                      "name": "LinuxDiagnostic",
                      "properties": {
                        "publisher": "Microsoft.OSTCExtensions",
                        "type": "LinuxDiagnostic",
                        "typeHandlerVersion": "2.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "xmlCfg": "[base64(concat(variables('wadcfgxstart'),variables('wadmetricsresourceid'),variables('wadcfgxend')))]",
                          "storageAccount": "[variables('diagnosticsStorageAccountName')]"
                        },
                        "protectedSettings": {
                          "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
                          "storageAccountKey": "[listkeys(variables('accountid'), variables('storageApiVersion')).key1]",
                          "storageAccountEndPoint": "https://core.windows.net"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          {
            "type": "Microsoft.Insights/autoscaleSettings",
            "apiVersion": "[variables('insightsApiVersion')]",
            "name": "autoscalewad",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('shortName'))]"
            ],
            "properties": {
              "name": "autoscalewad",
              "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('shortName'))]",
              "enabled": true,
              "profiles": [
                {
                  "name": "Profile1",
                  "capacity": {
                    "minimum": "1",
                    "maximum": "10",
                    "default": "1"
                  },
                  "rules": [
                    {
                      "metricTrigger": {
                        "metricName": "\\Processor\\PercentProcessorTime",
                        "metricNamespace": "",
                        "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('shortName'))]",
                        "timeGrain": "PT1M",
                        "statistic": "Average",
                        "timeWindow": "PT5M",
                        "timeAggregation": "Average",
                        "operator": "GreaterThan",
                        "threshold": 60.0
                      },
                      "scaleAction": {
                        "direction": "Increase",
                        "type": "ChangeCount",
                        "value": "1",
                        "cooldown": "PT1M"
                      }
                    },
                    {
                      "metricTrigger": {
                        "metricName": "\\Processor\\PercentProcessorTime",
                        "metricNamespace": "",
                        "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('shortName'))]",
                        "timeGrain": "PT1M",
                        "statistic": "Average",
                        "timeWindow": "PT5M",
                        "timeAggregation": "Average",
                        "operator": "LessThan",
                        "threshold": 30.0
                      },
                      "scaleAction": {
                        "direction": "Decrease",
                        "type": "ChangeCount",
                        "value": "1",
                        "cooldown": "PT5M"
                      }
                    }
                  ]
                }
              ]
            }
          },
          {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[concat(parameters('gfs1StorageAccountName'), copyIndex())]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "gfs1storageloop",
              "count": "[parameters('gfs1ScaleNumber')]"
            },
            "properties": {
              "accountType": "Standard_LRS"
            }
          },
          {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('gfs1AvailabilitySetName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": { }
          },
          {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('gfs1nicName'), copyindex())]",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "gfs1nicloop",
              "count": "[parameters('gfs1ScaleNumber')]"
            },
            "dependsOn": [
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
            ],
            "properties": {
              "ipConfigurations": [
                {
                  "name": "ipconfig1",
                  "properties": {
                    "privateIPAllocationMethod": "Static",
                    "privateIPAddress": "[concat(variables('vnetGFSIPPrefix'), copyindex())]",
                    "subnet": {
                      "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('vnetName'), '/subnets/', variables('vnetGFSSubnetName'))]"
                    }
                  }
                }
              ]
            }
          },
          {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('gfs1VmNamePrefix'), copyindex())]",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "gfs1vmloop",
              "count": "[parameters('gfs1ScaleNumber')]"
            },
            "dependsOn": [
              "gfs1storageloop",
              "[concat('Microsoft.Network/networkInterfaces/',variables('gfs1nicName'), copyindex())]",
              "[concat('Microsoft.Storage/storageAccounts/',parameters('gfs1StorageAccountName'), copyIndex())]",
              "[concat('Microsoft.Compute/availabilitySets/', variables('gfs1AvailabilitySetName'))]"
            ],
            "properties": {
                "availabilitySet": { 
                 "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('gfs1AvailabilitySetName'))]" 
               }, 
              "hardwareProfile": {
                "vmSize": "[parameters('gfs1VmSize')]"
              },
              "osProfile": {
                "computerName": "[concat(parameters('gfs1VmNamePrefix'), copyIndex())]",
                "adminUsername": "[parameters('gfs1AdminUsername')]",
                "adminPassword": "[parameters('gfs1AdminPassword')]"
              },
              "storageProfile": {
                "imageReference": {
                  "publisher": "[variables('gfs1OsImagePublisher')]",
                  "offer": "[variables('gfs1OsImageOffer')]",
                  "sku": "[variables('gfs1OsImageSKU')]",
                  "version": "[variables('gfs1OsImageVersion')]"
                },
                "osDisk": {
                  "name": "osdisk",
                  "vhd": {
                    "uri": "[concat('http://',parameters('gfs1StorageAccountName'), copyindex(), '.blob.core.windows.net/vhds/', parameters('gfs1VmNamePrefix'), copyIndex(), 'osdisk.vhd')]"
                  },
                  "caching": "ReadWrite",
                  "createOption": "FromImage"
                },
                "dataDisks": [
                  {
                    "name": "datadisk1",
                    "diskSizeGB": "156",
                    "lun": 0,
                    "vhd": {
                      "Uri": "[concat('http://', parameters('gfs1StorageAccountName'), copyindex(),'.blob.core.windows.net/vhds/', parameters('gfs1VmNamePrefix'), copyIndex(), 'datadisk1.vhd')]"
                    },
                    "caching": "None",
                    "createOption": "Empty"
                  },
                  {
                    "name": "datadisk2",
                    "diskSizeGB": "157",
                    "lun": 1,
                    "vhd": {
                      "Uri": "[concat('http://', parameters('gfs1StorageAccountName'), copyindex(),'.blob.core.windows.net/vhds/', parameters('gfs1VmNamePrefix'), copyIndex(), 'datadisk2.vhd')]"
                    },
                    "caching": "None",
                    "createOption": "Empty"
                  }
                ]
              },
              "networkProfile": {
                "networkInterfaces": [
                  {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('gfs1nicName'), copyindex()))]"
                  }
                ]
              }
            }
          },
          {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('gfs1VmNamePrefix'), copyindex(), '/setupgfs')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "gfs1extensionloop",
              "count": "[parameters('gfs1ScaleNumber')]"
            },
            "dependsOn": [
              "[concat('Microsoft.Compute/virtualMachines/', parameters('gfs1VmNamePrefix'), copyindex())]"
            ],
            "properties": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[parameters('gfs1CustomScriptFilePath')]"
                ],
                "commandToExecute": "[concat(parameters('gfs1CustomScriptCommandToExecute'), ' ', parameters('gfs1VmNamePrefix'), ' ', variables('vnetGFSIPPrefix'), ' ', parameters('gfs1VolumeName'), ' ', copyindex(), ' ', parameters('gfs1ScaleNumber'))]"
              }
            }
          },
          {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('mysqlStorageAccountName')]",
            "apiVersion": "[variables('resourceAPIVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
              "accountType": "[parameters('mysqlStorageAccountType')]"
            }
          },
          {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('mysqlAvailabilitySetName')]",
            "apiVersion": "[variables('resourceAPIVersion')]",
            "location": "[resourceGroup().location]",
            "properties": { }
          },
          {
            "apiVersion": "[variables('resourceAPIVersion')]",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('mysqlNicName'), copyIndex())]",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "mysqlNicLoop",
              "count": "[variables('mysqlNodeCount')]"
            },
            "dependsOn": [
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
              "[concat('Microsoft.Network/loadBalancers/', variables('mysqlLbName'))]"
            ],
            "properties": {
              "ipConfigurations": [
                {
                  "name": "[concat('ipconfig', copyIndex())]",
                  "properties": {
                    "privateIPAllocationMethod": "Static",
                    "privateIPAddress": "[concat(variables('mysqlipOctet01'), add(variables('mysqlipOctet2'), div(copyIndex(variables('mysqlipOctet3')), 255)), '.', mod(copyIndex(variables('mysqlipOctet3')), 255))]",
                    "subnet": {
                      "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/', variables('vnetName')), '/subnets/', variables('vnetMySQLSubnetName'))]"
                    },
                    "loadBalancerBackendAddressPools": [
                      {
                        "id": "[variables('mysqlIlbBackendAddressPoolID')]"
                      }
                    ],
                    "loadBalancerInboundNatRules": [
                      {
                        "id": "[concat(variables('mysqlLbID'),'/inboundNatRules/',parameters('mysqlName'), 'NatRule', copyIndex())]"
                      },
                      {
                        "id": "[concat(variables('mysqlLbID'),'/inboundNatRules/',parameters('mysqlName'), 'ProbeNatRule', copyIndex())]"
                      },
                      {
                        "id": "[concat(variables('mysqlLbID'),'/inboundNatRules/',parameters('mysqlName'), 'MySQLNatRule', copyIndex())]"
                      }
                    ]
                  }
                }
              ]
            }
          },

          {
            "name": "[concat(variables('mysqlVMName'), copyIndex())]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "[variables('resourceAPIVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "mysqlVmLoop",
              "count": "[variables('mysqlNodeCount')]"
            },
            "dependsOn": [
              "[concat('Microsoft.Compute/availabilitySets/', variables('mysqlAvailabilitySetName'))]",
              "[concat('Microsoft.Storage/storageAccounts/', variables('mysqlStorageAccountName'))]",
              "[concat('Microsoft.Network/networkInterfaces/', variables('mysqlNicName'), copyIndex())]"
            ],
            "properties": {
              "availabilitySet": {
                "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('mysqlAvailabilitySetName'))]"
              },
              "hardwareProfile": {
                "vmSize": "[parameters('mysqlVmSize')]"
              },
              "osProfile": {
                "computerName": "[concat(variables('mysqlVMName'), copyIndex())]",
                "adminUsername": "[parameters('mysqlVmUserName')]",
                "adminPassword": "[parameters('mysqlVmPassword')]"
              },
              "storageProfile": {
                "imageReference": {
                  "publisher": "[variables('mysqlOsImagePublisher')]",
                  "offer": "[variables('mysqlOsImageOffer')]",
                  "sku": "[variables('mysqlOsImageSKU')]",
                  "version": "[variables('mysqlOsImageVersion')]"
                },
                "osDisk": {
                  "name": "osdisk",
                  "vhd": {
                    "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('mysqlStorageAccountName')), variables('resourceAPIVersion')).primaryEndpoints.blob, 'vhds/', variables('mysqlVMName'), copyIndex(), 'osdisk.vhd')]"
                  },
                  "caching": "ReadWrite",
                  "createOption": "FromImage"
                },
                "dataDisks": [
                  {
                    "name": "datadisk1",
                    "diskSizeGB": "156",
                    "lun": 0,
                    "vhd": {
                      "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('mysqlStorageAccountName')), variables('resourceAPIVersion')).primaryEndpoints.blob, 'vhds/', variables('mysqlVMName'), copyIndex(), 'dataDisk1.vhd')]"
                    },
                    "caching": "None",
                    "createOption": "Empty"
                  },
                  {
                    "name": "datadisk2",
                    "diskSizeGB": "157",
                    "lun": 1,
                    "vhd": {
                      "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('mysqlStorageAccountName')), variables('resourceAPIVersion')).primaryEndpoints.blob, 'vhds/', variables('mysqlVMName'), copyIndex(), 'dataDisk2.vhd')]"
                    },
                    "caching": "None",
                    "createOption": "Empty"
                  }
                ]
              },
              "networkProfile": {
                "networkInterfaces": [
                  {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('mysqlNicName'), copyIndex()))]"
                  }
                ]
              }
            }
          },
          {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mysqlVMName'), copyIndex(), '/setupmysql')]",
            "apiVersion": "[variables('resourceAPIVersion')]",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "mysqlextensionloop",
              "count": "[variables('mysqlNodeCount')]"
            },
            "dependsOn": [
              "mysqlVmLoop",
              "[concat('Microsoft.Compute/virtualMachines/', variables('mysqlVMName'), copyIndex())]"
            ],
            "properties": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[parameters('mysqlCustomScriptFilePath')]"
                ]
              },
              "protectedSettings": {
                "commandToExecute": "[concat(parameters('mysqlCustomScriptCommandToExecute'), ' ', copyIndex(1), ' ', variables('mysqlIpOctet01'), add(variables('mysqlIpOctet2'), div(copyIndex(variables('mysqlIpOctet3')), 255)), '.', mod(copyIndex(variables('mysqlIpOctet3')), 255), ' ', parameters('mysqlConfigFilePath'), ' ', variables('mysqlSingleQuote'), parameters('mysqlReplicationPassword'), variables('mysqlSingleQuote'), ' ', variables('mysqlSingleQuote'), parameters('mysqlRootPassword'), variables('mysqlSingleQuote'), ' ', variables('mysqlSingleQuote'), parameters('mysqlProbePassword'), variables('mysqlSingleQuote'), ' ', variables('vnetMySQLIPPrefix'))]"
              }
            }
          },
          {
            "apiVersion": "[variables('resourceAPIVersion')]",
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('mysqlLbName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
            ],
            "properties": {
              "frontendIPConfigurations": [
                {
                  "name": "[variables('mysqlSshIPConfigName')]",
                  "Properties": {
                    "subnet": {
                      "Id": "[concat(resourceId('Microsoft.Network/virtualNetworks/', variables('vnetName')), '/subnets/', variables('vnetMySQLSubnetName'))]"
                    },
                    "privateIPAddress": "[variables('vnetMySQLlbIpAddress')]",
                    "privateIPAllocationMethod": "Static"
                  }
                }
              ],
              "backendAddressPools": [
                {
                  "name": "[variables('mysqlIlbBackendAddressPoolName')]"
                }
              ],
              "inboundNatRules": [
                {
                  "name": "[concat(parameters('mysqlName'),'NatRule0')]",
                  "properties": {
                    "frontendIPConfiguration": {
                      "id": "[variables('mysqlSshIPConfig')]"
                    },
                    "protocol": "tcp",
                    "frontendPort": "[parameters('mysqlSshNatRuleFrontEndPort0')]",
                    "backendPort": 22,
                    "enableFloatingIP": false
                  }
                },
                {
                  "name": "[concat(parameters('mysqlName'),'NatRule1')]",
                  "properties": {
                    "frontendIPConfiguration": {
                      "id": "[variables('mysqlSshIPConfig')]"
                    },
                    "protocol": "tcp",
                    "frontendPort": "[parameters('mysqlSshNatRuleFrontEndPort1')]",
                    "backendPort": 22,
                    "enableFloatingIP": false
                  }
                },
                {
                  "name": "[concat(parameters('mysqlName'),'MySQLNatRule0')]",
                  "properties": {
                    "frontendIPConfiguration": {
                      "id": "[variables('mysqlSshIPConfig')]"
                    },
                    "protocol": "tcp",
                    "frontendPort": "[parameters('mysqlFrontEndPort0')]",
                    "backendPort": 3306,
                    "enableFloatingIP": false
                  }
                },
                {
                  "name": "[concat(parameters('mysqlName'),'MySQLNatRule1')]",
                  "properties": {
                    "frontendIPConfiguration": {
                      "id": "[variables('mysqlSshIPConfig')]"
                    },
                    "protocol": "tcp",
                    "frontendPort": "[parameters('mysqlFrontEndPort1')]",
                    "backendPort": 3306,
                    "enableFloatingIP": false
                  }
                },
                {
                  "name": "[concat(parameters('mysqlName'),'ProbeNatRule0')]",
                  "properties": {
                    "frontendIPConfiguration": {
                      "id": "[variables('mysqlSshIPConfig')]"
                    },
                    "protocol": "tcp",
                    "frontendPort": "[parameters('mysqlProbePort0')]",
                    "backendPort": 9200,
                    "enableFloatingIP": false
                  }
                },
                {
                  "name": "[concat(parameters('mysqlName'),'ProbeNatRule1')]",
                  "properties": {
                    "frontendIPConfiguration": {
                      "id": "[variables('mysqlSshIPConfig')]"
                    },
                    "protocol": "tcp",
                    "frontendPort": "[parameters('mysqlProbePort1')]",
                    "backendPort": 9200,
                    "enableFloatingIP": false
                  }
                }
              ]
            }
          },
          {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[concat(parameters('redisStorageAccountName'), copyIndex())]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "redisstorageloop",
              "count": "[parameters('redisScaleNumber')]"
            },
            "properties": {
              "accountType": "Standard_LRS"
            }
          },
          {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('redisAvailabilitySetName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": { }
          },
          {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('redisnicName'), copyindex())]",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "redisnicloop",
              "count": "[parameters('redisScaleNumber')]"
            },
            "dependsOn": [
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
            ],
            "properties": {
              "ipConfigurations": [
                {
                  "name": "ipconfig1",
                  "properties": {
                    "privateIPAllocationMethod": "Static",
                    "privateIPAddress": "[concat(variables('vnetRedisIPPrefix'), copyindex())]",
                    "subnet": {
                      "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('vnetName'), '/subnets/', variables('vnetRedisSubnetName'))]"
                    }
                  }
                }
              ]
            }
          },
          {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(parameters('redisVmNamePrefix'), copyindex())]",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "redisvmloop",
              "count": "[parameters('redisScaleNumber')]"
            },
            "dependsOn": [
              "redisstorageloop",
              "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
              "redisnicloop",
              "[concat('Microsoft.Compute/availabilitySets/', variables('redisAvailabilitySetName'))]"
            ],
            "properties": {
              "availabilitySet": {
                "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('redisAvailabilitySetName'))]"
              },
              "hardwareProfile": {
                "vmSize": "[parameters('redisVmSize')]"
              },
              "osProfile": {
                "computerName": "[concat(parameters('redisVmNamePrefix'), copyIndex())]",
                "adminUsername": "[parameters('redisAdminUsername')]",
                "adminPassword": "[parameters('redisAdminPassword')]"
              },
              "storageProfile": {
                "imageReference": {
                  "publisher": "[variables('redisOsImagePublisher')]",
                  "offer": "[variables('redisOsImageOffer')]",
                  "sku": "[variables('redisOsImageSKU')]",
                  "version": "[variables('redisOsImageVersion')]"
                },
                "osDisk": {
                  "name": "osdisk",
                  "vhd": {
                    "uri": "[concat('http://',parameters('redisStorageAccountName'), copyindex(), '.blob.core.windows.net/vhds/', parameters('redisVmNamePrefix'), copyIndex(), 'osdisk.vhd')]"
                  },
                  "caching": "ReadWrite",
                  "createOption": "FromImage"
                }

              },
              "networkProfile": {
                "networkInterfaces": [
                  {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('redisnicName'), copyindex()))]"
                  }
                ]
              }
            }
          },
          {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('redisVmNamePrefix'), copyindex(), '/setupredis')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
              "name": "redisextensionloop",
              "count": "[parameters('redisScaleNumber')]"
            },
            "dependsOn": [
              "redisvmloop",
              "[concat('Microsoft.Compute/virtualMachines/', parameters('redisVmNamePrefix'), copyindex())]"
            ],
            "properties": {
              "publisher": "Microsoft.Azure.Extensions",
              "type": "CustomScript",
              "typeHandlerVersion": "2.0",
              "autoUpgradeMinorVersion": true,
              "settings": {
                "fileUris": [
                  "[parameters('redisCustomScriptFilePath')]"
                ],
                "commandToExecute": "[concat(parameters('redisCustomScriptCommandToExecute'), ' -n ', parameters('redisVmNamePrefix'), ' -c ', parameters('redisScaleNumber'),' -p ', variables('vnetRedisIPPrefix'),' -i ', copyindex())]"
              }
            }
          }
        ],
  "outputs": {
    "hostname": {
      "type": "string",
      "value": "[concat(variables('longName'), '.', resourceGroup().location, '.cloudapp.azure.com')]"
    },
    "sshCommand": {
      "type": "string",
      "value": "[concat('ssh -p 5000X ', parameters('projectAppAdminUsername'), '@', variables('longName'), '.', resourceGroup().location, '.cloudapp.azure.com')]"
    },
    "resultScript": {
      "type": "string",
      "value": "sudo cat /var/lib/waagent/custom-script/download/0/stdout" 
    },
    "httpClient": {
      "type": "string",
      "value": "[concat('http://', variables('longName'), '.', resourceGroup().location, '.cloudapp.azure.com','/html/index.html')]"
    }
  }
}

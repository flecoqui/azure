{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "frontendDnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Virtual Machine. DNS name: <dnsLabelPrefix>.<Region>.cloudapp.azure.com"
      }
    },
    "frontendVmSize": {
      "type": "string",
      "metadata": {
        "description": "VM Size"
      },
      "defaultValue": "Standard_F1"
    },
    "frontendImagePublisher": {
      "type": "string",
      "metadata": {
        "description": "frontendImagePublisher"
      },
      "defaultValue": "credativ"
    },
    "frontendImageOffer": {
      "type": "string",
      "metadata": {
        "description": "frontendImageOffer"
      },
      "defaultValue": "Debian"
    },
    "frontendImageSku": {
      "type": "string",
      "metadata": {
        "description": "frontendImageSku"
      },
      "defaultValue": "8"
    },
    "frontendImageVersion": {
      "type": "string",
      "metadata": {
        "description": "frontendImageVersion"
      },
      "defaultValue": "latest"
    },
    "frontendVmCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VMs"
      },
      "defaultValue": 2,
      "allowedValues": [
        1,
        2,
        3,
        4
      ]
    },
    "frontendInitScriptUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/flecoqui/azure/master/azure-quickstart-templates/201-lb-vms-frontend-backend/install-apache.sh"
    },
    "frontendInitScriptFileName": {
      "type": "string",
      "metadata": {
        "description": "sh [initScriptFileName]. Logs in this file /var/lib/waagent/Microsoft.OSTCExtensions.CustomScriptForLinux-1.5.2.0/download/0/stdout"
      },
      "defaultValue": "install-apache.sh"
    },
    "backendDnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique backend dns prefix"
      }
    },
    "backendVmSize": {
      "type": "string",
      "metadata": {
        "description": "VM Size"
      },
      "defaultValue": "Standard_F1"
    },
    "backendImagePublisher": {
      "type": "string",
      "metadata": {
        "description": "backendImagePublisher"
      },
      "defaultValue": "credativ"
    },
    "backendImageOffer": {
      "type": "string",
      "metadata": {
        "description": "backendImageOffer"
      },
      "defaultValue": "Debian"
    },
    "backendImageSku": {
      "type": "string",
      "metadata": {
        "description": "backendImageSku"
      },
      "defaultValue": "8"
    },
    "backendImageVersion": {
      "type": "string",
      "metadata": {
        "description": "backendImageVersion"
      },
      "defaultValue": "latest"
    },
    "backendVmCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VMs"
      },
      "defaultValue": 2,
      "allowedValues": [
        1,
        2,
        3,
        4
      ]
    },
    "backendInitScriptUrl": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/flecoqui/azure/master/azure-quickstart-templates/201-lb-vms-frontend-backend/install-apache.sh"
    },
    "backendInitScriptFileName": {
      "type": "string",
      "metadata": {
        "description": "sh [initScriptFileName]. Logs in this file /var/lib/waagent/Microsoft.OSTCExtensions.CustomScriptForLinux-1.5.2.0/download/0/stdout"
      },
      "defaultValue": "install-apache.sh"
    }
  },
  "variables": {
    "defaultAPIVersion": "2016-10-01",
    "storageAPIVersion": "2016-12-01",
    "availabilitySetAPIVersion": "2016-08-30",
    "virtualMachineAPIVersion": "2016-08-30",
    "loadBalancerName": "[concat(parameters('frontendDnsLabelPrefix'), 'lb')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/', variables('bePoolName'))]",
    "lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe')]",
    "natPoolName": "[concat(parameters('frontendDnsLabelPrefix'), 'natpool')]",
    "bePoolName": "[concat(parameters('frontendDnsLabelPrefix'), 'bepool')]",
    "virtualNetworkName": "[concat(parameters('frontendDnsLabelPrefix'), 'vnet')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "vnetAddressPrefix": "10.0.0.0/16",

    "storageAccountType": "Standard_LRS",
    "vmStorageAccountContainerName": "vhds",
    "frontendStorageAccountNamePrefix": "[toLower(substring(concat(parameters('frontendDnsLabelPrefix'), uniqueString(resourceGroup().id)), 0, 8))]",
    "frontendUniqueStorageAccountNameArray": [
      "[concat(variables('frontendStorageAccountNamePrefix'),uniqueString(concat(resourceGroup().id, variables('frontendStorageAccountNamePrefix'), '0')),'sa0')]",
      "[concat(variables('frontendStorageAccountNamePrefix'),uniqueString(concat(resourceGroup().id, variables('frontendStorageAccountNamePrefix'), '1')),'sa1')]",
      "[concat(variables('frontendStorageAccountNamePrefix'),uniqueString(concat(resourceGroup().id, variables('frontendStorageAccountNamePrefix'), '2')),'sa2')]",
      "[concat(variables('frontendStorageAccountNamePrefix'),uniqueString(concat(resourceGroup().id, variables('frontendStorageAccountNamePrefix'), '3')),'sa3')]"
    ],
    "frontendVmAvailabilitySetName": "[concat(parameters('frontendDnsLabelPrefix'), 'avset')]",
    "frontendNetworkSecurityGroupName": "[concat(parameters('frontendDnsLabelPrefix'), 'nsg')]",
    "frontendDataDiskVhdName": "[concat(parameters('frontendDnsLabelPrefix'), 'datadisk')]",
    "frontendPublicIPAddressName": "[concat(parameters('frontendDnsLabelPrefix'), 'ipip')]",
    "frontendPublicIPAddressType": "Dynamic",
    "frontendPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('frontendPublicIPAddressName'))]",
    "frontendOSDiskName": "[concat(parameters('frontendDnsLabelPrefix'), 'osdisk')]",
    "frontendNicName": "[concat(parameters('frontendDnsLabelPrefix'), 'nic')]",
    "frontendSubnetName": "[concat(parameters('frontendDnsLabelPrefix'), 'subnet')]",
    "frontendSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('frontendSubnetName'))]",
    "frontendSubnetAddressPrefix": "10.0.0.0/24",
    "frontendVmIPPrefix": "10.0.0.1",
    "frontendVmName": "[concat(parameters('frontendDnsLabelPrefix'), 'vm')]",
    "backendOSDiskName": "[concat(parameters('backendDnsLabelPrefix'), 'osdisk')]",
    "backendSubnetName": "[concat(parameters('backendDnsLabelPrefix'), 'subnet')]",
    "backendSubnetAddressPrefix": "10.0.1.0/24",
    "backendNetworkSecurityGroupName": "[concat(parameters('backendDnsLabelPrefix'), 'nsg')]",
    "backendVmIPPrefix": "10.0.1.1",
    "backendVmName": "[concat(parameters('backendDnsLabelPrefix'), 'vm')]",
    "backendStorageAccountNamePrefix": "[toLower(substring(concat(parameters('backendDnsLabelPrefix'), uniqueString(resourceGroup().id)), 0, 8))]",
    "backendUniqueStorageAccountNameArray": [
      "[concat(variables('backendStorageAccountNamePrefix'),uniqueString(concat(resourceGroup().id, variables('backendStorageAccountNamePrefix'), '0')),'sa0')]",
      "[concat(variables('backendStorageAccountNamePrefix'),uniqueString(concat(resourceGroup().id, variables('backendStorageAccountNamePrefix'), '1')),'sa1')]",
      "[concat(variables('backendStorageAccountNamePrefix'),uniqueString(concat(resourceGroup().id, variables('backendStorageAccountNamePrefix'), '2')),'sa2')]",
      "[concat(variables('backendStorageAccountNamePrefix'),uniqueString(concat(resourceGroup().id, variables('backendStorageAccountNamePrefix'), '3')),'sa3')]"
    ],
    "backendNicName": "[concat(parameters('backendDnsLabelPrefix'), 'nic')]",
    "backendVmAvailabilitySetName": "[concat(parameters('backendDnsLabelPrefix'), 'avset')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('storageAPIVersion')]",
      "name": "[variables('frontendUniqueStorageAccountNameArray')[copyIndex()]]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "frontendvmstorageloop",
        "count": "[parameters('frontendVmCount')]"
      },
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {
      }
    },
    {
      "apiVersion": "[variables('storageAPIVersion')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('backendUniqueStorageAccountNameArray')[copyIndex()]]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "backendvmstorageloop",
        "count": "[parameters('backendVmCount')]"
      },
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('frontendVmAvailabilitySetName')]",
      "apiVersion": "[variables('availabilitySetAPIVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('backendVmAvailabilitySetName')]",
      "apiVersion": "[variables('availabilitySetAPIVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "[variables('defaultAPIVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('frontendPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('frontendPublicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('frontendDnsLabelPrefix')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('defaultAPIVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('frontendPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('frontendPublicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "inboundNatRules": [
          {
            "name": "ssh0",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 50000,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "ssh1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 50001,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "ssh2",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 50002,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "ssh3",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 50003,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 10,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('defaultAPIVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('frontendNetworkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "ssh",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "http",
            "properties": {
              "description": "http server port",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          },
          {
            "name": "https",
            "properties": {
              "description": "https server port",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('defaultAPIVersion')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('backendNetworkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "ssh",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('defaultAPIVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('frontendNetworkSecurityGroupName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('backendNetworkSecurityGroupName'))]",
        "[concat('Microsoft.Network/loadBalancers/',variables('loadBalancerName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('frontendSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('frontendSubnetAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('frontendNetworkSecurityGroupName'))]"
              }
            }
          },
          {
            "name": "[variables('backendSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('backendSubnetAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('backendNetworkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('defaultAPIVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('frontendNicName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "frontendvmnicloop",
        "count": "[parameters('frontendVmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('frontendPublicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('frontendVmIPPrefix'), copyindex())]",
              "subnet": {
                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('frontendSubnetName'))]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/',variables('bePoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/ssh', copyindex())]"
                },
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/iperftcp', copyindex())]"
                },
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/iperfudp', copyindex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('defaultAPIVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('backendNicName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "backendvmnicloop",
        "count": "[parameters('backendVmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('backendVmIPPrefix'), copyindex())]",
              "subnet": {
                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('backendSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('virtualMachineAPIVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('frontendVmName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "frontendvmloop",
        "count": "[parameters('frontendVmCount')]"
      },
      "dependsOn": [
        "frontendvmstorageloop",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "frontendvmnicloop",
        "[concat('Microsoft.Compute/availabilitySets/', variables('frontendVmAvailabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('frontendVmAvailabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('frontendVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('frontendVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('frontendImagePublisher')]",
            "offer": "[parameters('frontendImageOffer')]",
            "sku": "[parameters('frontendImageSku')]",
            "version": "[parameters('frontendImageOsVersion')]"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('frontendUniqueStorageAccountNameArray')[copyIndex()],'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('frontendOSDiskName'),copyIndex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "datadisk1",
              "diskSizeGB": "100",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://',variables('frontendUniqueStorageAccountNameArray')[copyIndex()],'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('frontenddataDiskVhdName'),copyIndex(),'.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        },

        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('frontendNicName'), copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',variables('frontendUniqueStorageAccountNameArray')[copyIndex()],'.blob.core.windows.net')]"
          }
        }
      }

    },
    {
      "name": "[concat(variables('frontendVmName'), copyindex(), '/init')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('virtualMachineAPIVersion')]",
      "tags": {
        "displayName": "[concat(variables('frontendVmName'), copyindex(), 'init')]"
      },
      "copy": {
        "name": "frontendvminitloop",
        "count": "[parameters('frontendVmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('frontendVmName'), copyindex())]"
      ],

      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[parameters('frontendInitScriptUrl')]"
          ],
          "commandToExecute": "[concat('sh ', parameters('frontendInitScriptFileName'),' \"',  parameters('frontendDnsLabelPrefix'), '.', resourceGroup().location, '.cloudapp.azure.com','\"')]"
        }
      }
    },
    {
      "apiVersion": "[variables('virtualMachineAPIVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('backendVmName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "backendvmloop",
        "count": "[parameters('backendVmCount')]"
      },
      "dependsOn": [
        "backendvmstorageloop",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "backendvmnicloop",
        "[concat('Microsoft.Compute/availabilitySets/', variables('backendVmAvailabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('backendVmAvailabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('backendVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('backendVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('backendImagePublisher')]",
            "offer": "[parameters('backendImageOffer')]",
            "sku": "[parameters('backendImageSku')]",
            "version": "[parameters('backendImageVersion')]"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',variables('backendUniqueStorageAccountNameArray')[copyIndex()],'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('backendOSDiskName'),copyIndex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
          ]
        },

        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('backendNicName'), copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',variables('backendUniqueStorageAccountNameArray')[copyIndex()],'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "name": "[concat(variables('backendVmName'), copyindex(), '/init')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('virtualMachineAPIVersion')]",
      "tags": {
        "displayName": "[concat(variables('backendVmName'), copyindex(), 'init')]"
      },
      "copy": {
        "name": "backendvminitloop",
        "count": "[parameters('backendVmCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('backendVmName'), copyindex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[parameters('backendInitScriptUrl')]"
          ],
          "commandToExecute": "[concat('sh ', parameters('backendInitScriptFileName'),' \"',  parameters('frontendDnsLabelPrefix'), '.', resourceGroup().location, '.cloudapp.azure.com','\"')]"
        }
      }
    }
  ],
  "outputs": {
    "hostname": {
      "type": "string",
      "value": "[concat(parameters('frontendDnsLabelPrefix'), '.', resourceGroup().location, '.cloudapp.azure.com')]"
    },
    "sshCommand": {
      "type": "string",
      "value": "[concat('ssh -p 5000X ', parameters('adminUsername'), '@',  parameters('frontendDnsLabelPrefix'), '.', resourceGroup().location, '.cloudapp.azure.com')]"
    },
    "resultScript": {
      "type": "string",
      "value": "sudo cat /var/lib/waagent/Microsoft.OSTCExtensions.CustomScriptForLinux-1.5.2.0/download/0/stdout"
    },
    "httpClient": {
      "type": "string",
      "value": "[concat('http://', parameters('frontendDnsLabelPrefix'), '.', resourceGroup().location, '.cloudapp.azure.com')]"
    }
  }
}
